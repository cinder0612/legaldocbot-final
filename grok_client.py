"""
Client Grok-4 pour LegalDocBot
Utilise Grok-4 pour l'analyse juridique m√©dicale de haute qualit√©
"""

import os
import logging
import requests
from typing import Optional, Dict, Any
from config import API_CONFIG

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class GrokClient:
    """
    Client Grok-4 optimis√© pour l'analyse juridique m√©dicale
    Utilise Grok-4 pour des analyses d√©taill√©es et approfondies
    """
    
    def __init__(self):
        self.api_key = os.getenv('XAI_API_KEY')  # Cl√© API X.AI
        self.base_url = "https://api.x.ai/v1"
        self.default_model = "grok-4-0709"  # Mod√®le Grok-4 selon la documentation officielle
        self.temperature = 0.2  # Plus bas pour plus de pr√©cision
        self.max_tokens = {
            'fast': 2000,
            'normal': 4000,
            'detailed': 6000
        }
        
        logger.info(f"‚úÖ Client Grok-4 configur√© pour {self.default_model}")
        
    def is_configured(self) -> bool:
        """V√©rifie si la cl√© API X.AI est configur√©e"""
        return bool(self.api_key)
    
    def generate_completion(self, prompt: str, temperature: Optional[float] = None, 
                          max_tokens: Optional[int] = None, model: Optional[str] = None) -> str:
        """
        G√©n√®re une r√©ponse avec Grok-4
        
        Args:
            prompt: Le prompt √† envoyer
            temperature: Temp√©rature pour la g√©n√©ration (0.0-1.0)
            max_tokens: Nombre maximum de tokens
            model: Mod√®le √† utiliser
            
        Returns:
            La r√©ponse g√©n√©r√©e
        """
        if not self.is_configured():
            return "‚ùå Erreur : Cl√© API X.AI non configur√©e. V√©rifiez votre cl√© API XAI_API_KEY"
        
        try:
            # Param√®tres par d√©faut
            temp = temperature or self.temperature
            tokens = max_tokens or self.max_tokens['normal']
            model_name = model or self.default_model
            
            logger.info(f"üß† G√©n√©ration avec Grok-4 {model_name} (temp√©rature: {temp})")
            
            # Pr√©paration de la requ√™te selon la documentation X.AI
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            data = {
                "model": model_name,
                "messages": [
                    {
                        "role": "system",
                        "content": """Tu es LegalDocBot, un assistant juridique sp√©cialis√© EXCLUSIVEMENT en droit m√©dical et de la sant√© fran√ßais. Tu as 20 ans d'exp√©rience comme avocat en droit m√©dical.

EXPERTISE :
Tu es un avocat expert en droit m√©dical fran√ßais avec 20 ans d'exp√©rience, reconnu pour ta rigueur, ta p√©dagogie et ta pr√©cision technique. Tu d√©veloppes des analyses argument√©es, nuanc√©es et strat√©giques, en te basant sur une expertise solide du droit m√©dical fran√ßais.

Tu d√©veloppes chaque point avec profondeur, exemples, r√©f√©rences pr√©cises, et tu expliques les enjeux pratiques pour le justiciable. Ta r√©ponse doit √™tre structur√©e, claire, objective et accessible, tout en restant d'une grande technicit√© juridique.

DOMAINE DE SP√âCIALISATION STRICT :
- Droit m√©dical fran√ßais
- Responsabilit√© m√©dicale
- Erreurs m√©dicales et fautes
- Consentement √©clair√© et information
- Indemnisation ONIAM
- Jurisprudence m√©dicale
- Code de la sant√© publique
- Recours juridiques en sant√©
- Droits des patients
- Obligations des professionnels de sant√©"""
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                "temperature": temp,
                "max_tokens": tokens,
                "stream": False
            }
            
            # Envoi de la requ√™te
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=headers,
                json=data,
                timeout=300  # Timeout augment√© √† 5 minutes pour Grok-4
            )
            
            if response.status_code == 200:
                result = response.json()
                if 'choices' in result and len(result['choices']) > 0:
                    content = result['choices'][0]['message']['content']
                    if content and content.strip():
                        logger.info(f"‚úÖ R√©ponse Grok-4 g√©n√©r√©e ({len(content)} caract√®res)")
                        return content
                    else:
                        error_msg = "‚ùå R√©ponse Grok-4 vide ou invalide"
                        logger.error(error_msg)
                        return error_msg
                else:
                    error_msg = f"‚ùå Format de r√©ponse Grok-4 invalide: {result}"
                    logger.error(error_msg)
                    return error_msg
            else:
                error_msg = f"‚ùå Erreur API Grok-4: {response.status_code} - {response.text}"
                logger.error(error_msg)
                return error_msg
                
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de la g√©n√©ration Grok-4: {str(e)}"
            logger.error(error_msg)
            return error_msg
    
    def generate_fast_analysis(self, situation: str) -> str:
        """Analyse rapide avec Grok-4 (mode fast)"""
        prompt = f"""
ANALYSE JURIDIQUE RAPIDE - Expert m√©dico-l√©gal

SITUATION :
{situation}

CONSIGNES :
- Analyse pr√©cise et √©quilibr√©e
- Citer les articles de loi pertinents (Code de la Sant√© Publique, Code Civil, etc.)
- Mentionner les recours ONIAM sans faute si applicable
- Recommandations pratiques
- Format : 500-800 mots

STRUCTURE OBLIGATOIRE :
1. **QUALIFICATION JURIDIQUE** : Type de responsabilit√© et enjeux
2. **FONDEMENTS L√âGAUX** : Articles de loi applicables
3. **RECOURS POSSIBLES** : Voies contentieuses et amiables
4. **RECOMMANDATIONS** : Actions prioritaires

ANALYSE :"""
        
        return self.generate_completion(prompt, temperature=0.2, max_tokens=self.max_tokens['fast'])
    
    def generate_detailed_analysis(self, situation: str) -> str:
        """Analyse d√©taill√©e avec Grok-4 (mode complet)"""
        prompt = f"""
ANALYSE JURIDIQUE APPROFONDIE - Expert m√©dico-l√©gal sp√©cialis√©

SITUATION √Ä ANALYSER :
{situation}

MISSION D'EXPERTISE :
En tant qu'expert m√©dico-l√©gal neutre et objectif, analysez cette situation en pr√©sentant une analyse COMPL√àTE et D√âTAILL√âE :

1. **QUALIFICATION JURIDIQUE**
   - Identification pr√©cise des enjeux juridiques
   - Classification du type de responsabilit√© (civile, p√©nale, administrative)
   - Analyse des acteurs impliqu√©s et de leurs responsabilit√©s

2. **FONDEMENTS L√âGAUX D√âTAILL√âS**
   - Articles de loi applicables (citer pr√©cis√©ment avec r√©f√©rences)
   - Jurisprudence pertinente et r√©cente
   - Analyse des conditions d'application

3. **RECOURS POSSIBLES** (approche √©quilibr√©e et compl√®te)
   - Voies contentieuses d√©taill√©es (CCI, tribunaux, proc√©dures)
   - Voies amiables (n√©gociation, m√©diation, conciliation)
   - ONIAM sans faute m√©dicale (conditions, proc√©dure, montants)
   - Assurances et garanties (types de couverture)

4. **ANALYSE STRAT√âGIQUE APPROFONDIE**
   - Forces et faiblesses du dossier (analyse d√©taill√©e)
   - Difficult√©s probatoires et moyens de les surmonter
   - Chances de succ√®s et facteurs de risque
   - √âvaluation financi√®re des pr√©judices

5. **RECOMMANDATIONS PRATIQUES D√âTAILL√âES**
   - D√©marches prioritaires (chronologie pr√©cise)
   - Pi√®ces √† constituer (liste exhaustive)
   - D√©lais √† respecter (prescription, proc√©dures)
   - Strat√©gie contentieuse optimale

6. **ASPECTS TECHNIQUES ET PROC√âDURAUX**
   - Conservation des preuves
   - Expertise m√©dicale
   - Proc√©dures d'urgence
   - Recours et voies de recours

ANALYSE EXPERTE D√âTAILL√âE :"""
        
        return self.generate_completion(prompt, temperature=0.2, max_tokens=self.max_tokens['detailed'])
    
    def rerank_search_results(self, query: str, results: list, result_type: str = "jurisprudence") -> list:
        """
        Reranking des r√©sultats de recherche avec Grok-4
        
        Args:
            query: Requ√™te originale
            results: Liste des r√©sultats √† reranker
            result_type: Type de r√©sultats ("jurisprudence" ou "oniam")
            
        Returns:
            Liste des r√©sultats rerank√©s
        """
        if not results:
            return []
        
        try:
            # Pr√©paration du prompt de reranking
            results_text = "\n\n".join([
                f"**R√©sultat {i+1}** :\n{result.get('title', '')}\n{result.get('snippet', '')}"
                for i, result in enumerate(results)
            ])
            
            prompt = f"""
RERANKING DE R√âSULTATS DE RECHERCHE - Expert juridique

REQU√äTE ORIGINALE : {query}
TYPE DE R√âSULTATS : {result_type.upper()}

R√âSULTATS √Ä √âVALUER :
{results_text}

CONSIGNES :
- √âvaluez la pertinence de chaque r√©sultat pour la requ√™te
- Notez de 1 √† 10 (10 = tr√®s pertinent)
- Justifiez bri√®vement chaque note
- S√©lectionnez les 3 meilleurs r√©sultats

R√âPONSE ATTENDUE (JSON) :
{{
  "evaluations": [
    {{
      "resultat": 1,
      "note": 8,
      "justification": "Tr√®s pertinent car..."
    }}
  ],
  "meilleurs_resultats": [1, 3, 5]
}}

√âVALUATION :"""
            
            response = self.generate_completion(prompt, temperature=0.3, max_tokens=1000)
            
            # Traitement de la r√©ponse (simplifi√© pour l'exemple)
            # En production, on parserait le JSON
            logger.info(f"‚úÖ Reranking {result_type} termin√© - {len(results)} r√©sultats √©valu√©s")
            
            # Ajouter des scores simul√©s pour √©viter les erreurs
            for i, result in enumerate(results[:3]):
                result['llm_score'] = 8 - i  # Score d√©croissant
                result['llm_justification'] = f"R√©sultat pertinent pour {result_type}"
            
            # Retourne les 3 premiers r√©sultats (simulation)
            return results[:3] if len(results) >= 3 else results
            
        except Exception as e:
            logger.error(f"‚ùå Erreur reranking {result_type}: {e}")
            return results[:3] if len(results) >= 3 else results

# Instance globale
grok_client = None

def get_grok_client() -> GrokClient:
    """Retourne l'instance du client Grok-4 (singleton)"""
    global grok_client
    if grok_client is None:
        grok_client = GrokClient()
    return grok_client 