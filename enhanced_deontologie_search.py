"""
Syst√®me de Recherche Sp√©cialis√© D√©ontologie M√©dicale
Am√©liore la d√©tection des cas de d√©ontologie dans les analyses
"""

import json
import re
from typing import List, Dict, Optional
from pathlib import Path

class DeontologieSearchEngine:
    """
    Moteur de recherche sp√©cialis√© pour la d√©ontologie m√©dicale
    """
    
    def __init__(self):
        # Mots-cl√©s d√©ontologie
        self.deontologie_keywords = {
            "secret_medical": [
                "secret m√©dical", "secret professionnel", "confidentialit√©",
                "discr√©tion", "r√©v√©lation", "divulgation", "silence"
            ],
            "consentement": [
                "consentement √©clair√©", "consentement libre", "information",
                "accord", "refus", "autonomie", "d√©cision"
            ],
            "obligation_information": [
                "obligation d'information", "devoir d'information", "information patient",
                "explication", "compr√©hension", "risques", "b√©n√©fices"
            ],
            "independance": [
                "ind√©pendance", "libert√©", "conflit d'int√©r√™t", "int√©r√™t personnel",
                "corruption", "cadeaux", "avantages"
            ],
            "competence": [
                "comp√©tence", "formation", "qualification", "expertise",
                "limites", "sp√©cialisation", "formation continue"
            ],
            "dignite": [
                "dignit√©", "respect", "humanit√©", "√©thique",
                "morale", "valeurs", "principe"
            ]
        }
        
        # Articles de d√©ontologie importants
        self.deontologie_articles = [
            "R.4127-1", "R.4127-2", "R.4127-3", "R.4127-4", "R.4127-5",
            "R.4127-6", "R.4127-7", "R.4127-8", "R.4127-9", "R.4127-10",
            "R.4127-11", "R.4127-12", "R.4127-13", "R.4127-14", "R.4127-15",
            "R.4127-16", "R.4127-17", "R.4127-18", "R.4127-19", "R.4127-20"
        ]
    
    def detect_deontologie_issues(self, situation: str) -> Dict:
        """
        D√©tecte les probl√®mes de d√©ontologie dans une situation
        
        Args:
            situation: Description de la situation m√©dicale
            
        Returns:
            Dictionnaire avec les probl√®mes d√©tect√©s
        """
        situation_lower = situation.lower()
        issues = {}
        
        for category, keywords in self.deontologie_keywords.items():
            detected_keywords = []
            for keyword in keywords:
                if keyword.lower() in situation_lower:
                    detected_keywords.append(keyword)
            
            if detected_keywords:
                issues[category] = {
                    'keywords': detected_keywords,
                    'severity': self._calculate_severity(category, detected_keywords),
                    'articles': self._get_relevant_articles(category)
                }
        
        return issues
    
    def _calculate_severity(self, category: str, keywords: List[str]) -> str:
        """Calcule la s√©v√©rit√© du probl√®me de d√©ontologie"""
        severity_map = {
            "secret_medical": "CRITIQUE",
            "consentement": "√âLEV√âE", 
            "obligation_information": "√âLEV√âE",
            "independance": "MOYENNE",
            "competence": "MOYENNE",
            "dignite": "√âLEV√âE"
        }
        return severity_map.get(category, "FAIBLE")
    
    def _get_relevant_articles(self, category: str) -> List[str]:
        """Retourne les articles de d√©ontologie pertinents"""
        article_map = {
            "secret_medical": ["R.4127-4", "R.4127-5"],
            "consentement": ["R.4127-36", "R.4127-37", "R.4127-38"],
            "obligation_information": ["R.4127-35", "R.4127-36"],
            "independance": ["R.4127-12", "R.4127-13"],
            "competence": ["R.4127-11", "R.4127-14"],
            "dignite": ["R.4127-2", "R.4127-3"]
        }
        return article_map.get(category, [])
    
    def enhance_analysis_with_deontologie(self, analysis: str, situation: str) -> str:
        """
        Am√©liore l'analyse en ajoutant les aspects d√©ontologiques UNIQUEMENT si pertinent
        
        Args:
            analysis: Analyse existante
            situation: Situation m√©dicale
            
        Returns:
            Analyse enrichie avec d√©ontologie (seulement si pertinent)
        """
        issues = self.detect_deontologie_issues(situation)
        
        # V√âRIFICATION INTELLIGENTE : Ajouter seulement si pertinent
        if not issues:
            print("‚ÑπÔ∏è Aucun probl√®me de d√©ontologie d√©tect√© - Section non ajout√©e")
            return analysis
        
        # V√©rifier la s√©v√©rit√© des probl√®mes
        has_critical_issues = any(details['severity'] == 'CRITIQUE' for details in issues.values())
        has_high_issues = any(details['severity'] == '√âLEV√âE' for details in issues.values())
        
        # Ajouter seulement si probl√®mes significatifs
        if not (has_critical_issues or has_high_issues):
            print("‚ÑπÔ∏è Probl√®mes de d√©ontologie mineurs - Section non ajout√©e")
            return analysis
        
        print(f"‚úÖ Probl√®mes de d√©ontologie d√©tect√©s: {len(issues)} cat√©gories - Section ajout√©e")
        
        # Ajouter section d√©ontologie
        deontologie_section = "\n\n## ‚öñÔ∏è ASPECTS D√âONTOLOGIQUES\n\n"
        deontologie_section += "En tant qu'expert m√©dico-l√©gal, je dois √©galement souligner les enjeux d√©ontologiques de cette situation :\n\n"
        
        for category, details in issues.items():
            category_names = {
                "secret_medical": "Secret M√©dical",
                "consentement": "Consentement √âclair√©", 
                "obligation_information": "Obligation d'Information",
                "independance": "Ind√©pendance Professionnelle",
                "competence": "Comp√©tence et Formation",
                "dignite": "Dignit√© et Respect"
            }
            
            category_name = category_names.get(category, category.replace('_', ' ').title())
            severity = details['severity']
            keywords = details['keywords']
            articles = details['articles']
            
            deontologie_section += f"### üîç {category_name} (S√©v√©rit√©: {severity})\n\n"
            deontologie_section += f"**Probl√®mes d√©tect√©s :** {', '.join(keywords)}\n\n"
            
            if articles:
                deontologie_section += f"**Articles de d√©ontologie applicables :** {', '.join(articles)}\n\n"
            
            # Ajouter explication selon la cat√©gorie
            explanations = {
                "secret_medical": "Le secret m√©dical est un principe fondamental (art. R.4127-4 CSP). Toute violation peut entra√Æner des sanctions disciplinaires et p√©nales.",
                "consentement": "Le consentement √©clair√© est obligatoire pour tout acte m√©dical (art. R.4127-36 CSP). Le patient doit √™tre inform√© des risques et b√©n√©fices.",
                "obligation_information": "Le m√©decin a l'obligation d'informer le patient de mani√®re claire et adapt√©e (art. R.4127-35 CSP).",
                "independance": "Le m√©decin doit exercer en toute ind√©pendance, sans conflit d'int√©r√™t (art. R.4127-12 CSP).",
                "competence": "Le m√©decin doit maintenir et perfectionner ses connaissances (art. R.4127-11 CSP).",
                "dignite": "Le m√©decin doit respecter la dignit√© de la personne humaine (art. R.4127-2 CSP)."
            }
            
            deontologie_section += f"**Explication :** {explanations.get(category, 'Aspect d√©ontologique √† consid√©rer.')}\n\n"
        
        # Recommandations d√©ontologiques
        deontologie_section += "### üìã Recommandations D√©ontologiques\n\n"
        deontologie_section += "1. **V√©rifier le respect du secret m√©dical** dans tous les √©changes\n"
        deontologie_section += "2. **S'assurer du consentement √©clair√©** pour tous les actes\n"
        deontologie_section += "3. **Documenter l'information** fournie au patient\n"
        deontologie_section += "4. **Respecter l'ind√©pendance** professionnelle\n"
        deontologie_section += "5. **Maintenir la comp√©tence** par la formation continue\n\n"
        
        return analysis + deontologie_section
    
    def search_deontologie_chunks(self, query: str) -> List[Dict]:
        """
        Recherche sp√©cifique dans les chunks de d√©ontologie
        
        Args:
            query: Requ√™te de recherche
            
        Returns:
            Liste des chunks pertinents
        """
        try:
            from local_kb_search import LocalKnowledgeBase
            
            kb = LocalKnowledgeBase()
            
            # Recherche avec mots-cl√©s d√©ontologie
            deontologie_queries = [
                f"d√©ontologie {query}",
                f"code de d√©ontologie {query}",
                f"R.4127 {query}"
            ]
            
            all_results = []
            for dq in deontologie_queries:
                results = kb.search(dq, top_k=5)
                all_results.extend(results)
            
            # D√©dupliquer
            seen_links = set()
            unique_results = []
            for result in all_results:
                content_hash = hash(result.get('content', ''))
                if content_hash not in seen_links:
                    seen_links.add(content_hash)
                    unique_results.append(result)
            
            return unique_results[:10]
            
        except Exception as e:
            print(f"‚ùå Erreur recherche d√©ontologie: {e}")
            return []

def test_deontologie_detection():
    """Test de d√©tection des probl√®mes de d√©ontologie"""
    
    print("üß™ TEST D√âTECTION D√âONTOLOGIE")
    print("=" * 40)
    
    engine = DeontologieSearchEngine()
    
    # Cas de test
    test_cases = [
        "Un m√©decin r√©v√®le des informations m√©dicales √† un tiers sans consentement du patient",
        "Le patient n'a pas √©t√© inform√© des risques de l'intervention",
        "Le m√©decin a accept√© des cadeaux de l'industrie pharmaceutique",
        "Le m√©decin n'a pas respect√© le secret m√©dical en parlant du patient √† sa famille"
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüìã CAS {i}: {case}")
        issues = engine.detect_deontologie_issues(case)
        
        if issues:
            for category, details in issues.items():
                print(f"  üîç {category}: {details['severity']} - {details['keywords']}")
        else:
            print("  ‚úÖ Aucun probl√®me de d√©ontologie d√©tect√©")

if __name__ == "__main__":
    test_deontologie_detection() 