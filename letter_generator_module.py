"""
Module de g√©n√©ration de lettres professionnelles pour LegalDocBot
G√©n√®re des lettres adapt√©es selon le destinataire (CDU, CCI, ONIAM, etc.)
"""

from datetime import date
from typing import Dict, Optional
import streamlit as st
from grok_client import get_grok_client

# ============================================================================
# PROMPT MASTER POUR LETTRES PROFESSIONNELLES
# ============================================================================

LETTER_MASTER_PROMPT = """Tu es LegalDocBot, r√©dacteur de lettres professionnelles en droit m√©dical fran√ßais.

CONTEXTE :
Situation : {situation}
Type de destinataire : {dest_type}  # CDU, CCI, HAS, ONIAM, ARS, CNAM, Tribunal, Assurance

INSTRUCTIONS ABSOLUES :
1. Ton : professionnel, empathique, ferme, mais respectueux.
2. Structure stricte :
   - En-t√™te (cabinet d'avocat)
   - R√©f√©rences dossier
   - Destinataire complet
   - Objet pr√©cis
   - Corps : faits ‚Üí fondements juridiques ‚Üí demande ‚Üí d√©lai
   - Signature
3. Adapter le ton au destinataire (ex. CDU : collaboratif / Tribunal : juridictionnel).
4. G√©n√©rer UNIQUEMENT le texte de la lettre, sans commentaires ni m√©tadonn√©es.
5. Utiliser les informations de l'analyse pour enrichir le contenu mais ne pas la reproduire int√©gralement."""

# ============================================================================
# DICTIONNAIRE DE TON PAR DESTINATAIRE
# ============================================================================

TONE_MAP = {
    "cdu": "respectueux et constructif, ax√© sur am√©lioration des soins",
    "cci": "professionnel et d√©termin√©, ax√© sur conciliation",
    "oniam": "respectueux mais ferme, ax√© sur indemnisation al√©a",
    "has": "technique et pr√©cis, ax√© sur recommandations",
    "ars": "factuel et normatif, ax√© sur contr√¥le",
    "cnam": "administratif, ax√© sur prise en charge",
    "tribunal": "solennel et juridictionnel",
    "insurance": "professionnel et ferme"
}

# ============================================================================
# NOMS DES DESTINATAIRES
# ============================================================================

DEST_NAMES = {
    "cdu": "Commission des Usagers",
    "cci": "Commission de Conciliation et d'Indemnisation",
    "oniam": "Office National d'Indemnisation des Accidents M√©dicaux",
    "has": "Haute Autorit√© de Sant√©",
    "ars": "Agence R√©gionale de Sant√©",
    "cnam": "Caisse Nationale d'Assurance Maladie",
    "tribunal": "Tribunal Administratif",
    "insurance": "Compagnie d'Assurance"
}

# ============================================================================
# FONCTION PRINCIPALE DE G√âN√âRATION
# ============================================================================

@st.cache_data(ttl=3600)  # Cache 1 heure
def generate_exceptional_letter(situation: str, analysis: str, dest_type: str, avocat_name: str = "DUPONT", barreau: str = "Paris") -> str:
    """
    G√©n√®re une lettre exceptionnelle selon le destinataire.
    
    Args:
        situation: Description de la situation m√©dicale
        analysis: Analyse juridique compl√®te (utilis√©e pour contexte mais pas dans le prompt)
        dest_type: Type de destinataire (cdu, cci, oniam, has, ars, cnam, tribunal, insurance)
        avocat_name: Nom de l'avocat pour la signature
        barreau: Barreau de l'avocat
    
    Returns:
        Lettre professionnelle g√©n√©r√©e
    """
    if dest_type not in TONE_MAP:
        return "‚ùå Type de destinataire invalide"
    
    try:
        # Construction du prompt sp√©cifique pour les lettres "infutables"
        prompt = f"""Tu es LegalDocBot, r√©dacteur de lettres professionnelles en droit m√©dical fran√ßais.

SITUATION : {situation}
DESTINATAIRE : {DEST_NAMES[dest_type]} ({dest_type.upper()})
TON : {TONE_MAP[dest_type]}
SIGNATURE : Ma√Ætre {avocat_name} - Barreau de {barreau}

INSTRUCTIONS POUR LETTRE "INFUTABLE" :
1. R√©dige une lettre professionnelle compl√®te avec :
   - En-t√™te de cabinet d'avocat
   - R√©f√©rences du dossier
   - Destinataire complet
   - Objet pr√©cis
   - Corps structur√© (faits ‚Üí fondements juridiques ‚Üí demande ‚Üí d√©lai)
   - Signature

2. Ton : {TONE_MAP[dest_type]}

3. CONTENU OBLIGATOIRE "INFUTABLE" :
   - **R√©f√©rences juridiques EXACTES** : Cass. 1re civ., 14 oct. 2010, n¬∞ 09-69.199 (perte de chance)
   - **Articles de loi pr√©cis** : L.1110-5 CSP, 1240 Code civil, R.4127-33 d√©ontologie
   - **Chiffrage ONIAM 2024** : "perte de chance √©valu√©e √† X% ‚Üí estimation Y ‚Ç¨"
   - **Guide HAS cit√©** : "Guide HAS 2023 - [sp√©cialit√©] comme r√©f√©rence non respect√©e"
   - **Pi√®ces jointes list√©es** : CR m√©dical, examens, certificats avec dates
   - **Signature personnalis√©e** : "Ma√Ætre {avocat_name} - Sp√©cialiste droit m√©dical - Barreau de {barreau}"
   - **Copie conforme** : "Copie conforme pour {DEST_NAMES[dest_type]}"

4. FORMAT : Lettre professionnelle compl√®te, sans commentaires ni m√©tadonn√©es.

G√©n√©rez UNIQUEMENT le texte de la lettre avec TOUS les √©l√©ments "infutables"."""
        
        # Appel √† Grok-4
        client = get_grok_client()
        letter = client.generate_completion(prompt, temperature=0.1)
        
        if letter and letter.strip():
            return letter.strip()
        else:
            return "‚ùå Erreur lors de la g√©n√©ration de la lettre"
            
    except Exception as e:
        return f"‚ùå Erreur technique : {str(e)}"

# ============================================================================
# FONCTION D'AFFICHAGE STREAMLIT
# ============================================================================

def display_letter_generator(situation: str, analysis: str):
    """
    Interface Streamlit pour la g√©n√©ration de lettres
    """
    st.markdown("---")
    st.markdown("### üìù G√©n√©rateur de Lettres Professionnelles")
    
    # S√©lection du destinataire avec bouton align√© √† droite
    with st.container():
        cols = st.columns([3, 1, 1])   # 3 colonnes : label, vide, bouton
        with cols[0]:
            dest_type = st.selectbox(
                "üéØ Destinataire",
                options=list(TONE_MAP.keys()),
                format_func=lambda x: f"{DEST_NAMES[x]} ({x.upper()})"
            )
        with cols[2]:
            generate_clicked = st.button("üöÄ G√©n√©rer Lettre", type="primary", use_container_width=False, key="generate_letter_main")
    
    # Personnalisation de la signature
    col1, col2 = st.columns(2)
    with col1:
        avocat_name = st.text_input(
            "üë®‚Äçüíº Nom de l'avocat",
            value="DUPONT",
            help="Nom qui appara√Ætra dans la signature"
        )
    with col2:
        barreau = st.text_input(
            "üèõÔ∏è Barreau",
            value="Paris",
            help="Barreau de l'avocat"
        )
    
    # Logique de g√©n√©ration sans spinner
    if generate_clicked:
        if situation and analysis:
            # PAS de spinner ici
            letter = generate_exceptional_letter(situation, analysis, dest_type, avocat_name, barreau)
            st.session_state.generated_letter = letter
            st.session_state.letter_dest_type = dest_type
            st.session_state.avocat_name = avocat_name
            st.session_state.barreau = barreau
            st.success("‚úÖ Lettre g√©n√©r√©e avec succ√®s !")
            st.rerun()   # rafra√Æchit pour afficher la lettre imm√©diatement
        else:
            st.error("‚ùå Situation et analyse requises")
    
    # Affichage de la lettre g√©n√©r√©e
    if hasattr(st.session_state, 'generated_letter') and st.session_state.generated_letter:
        st.markdown("---")
        st.markdown("### üìÑ Lettre G√©n√©r√©e")
        
        # Informations sur le destinataire
        dest_name = DEST_NAMES.get(st.session_state.letter_dest_type, "Destinataire")
        tone = TONE_MAP.get(st.session_state.letter_dest_type, "professionnel")
        
        st.info(f"**Destinataire :** {dest_name} | **Ton :** {tone}")
        
        # Affichage de la lettre
        st.markdown("---")
        st.markdown(st.session_state.generated_letter)
        
        # Checklist "infutable"
        display_infutable_checklist(st.session_state.generated_letter)
        
        # Boutons d'action
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìã Copier le texte", key="copy_letter"):
                st.write("‚úÖ Texte copi√© dans le presse-papiers")
                st.session_state.copied = True
        
        with col2:
            # Export PDF (√† impl√©menter)
            if st.button("üì• T√©l√©charger PDF", key="download_letter_pdf"):
                st.info("üîÑ Fonctionnalit√© PDF en cours de d√©veloppement")
        
        with col3:
            if st.button("üîÑ R√©g√©n√©rer", key="regenerate_letter"):
                del st.session_state.generated_letter
                st.rerun()

# ============================================================================
# FONCTIONS UTILITAIRES
# ============================================================================

def get_letter_template(dest_type: str) -> str:
    """
    Retourne un template de base pour le type de destinataire
    """
    templates = {
        "cdu": """
[CABINET D'AVOCAT]
[Adresse]

R√©f√©rence : [REF_DOSSIER]
Date : {date}

√Ä l'attention de la Commission des Usagers
[√âtablissement de sant√©]

Objet : Demande d'examen de dossier m√©dical

Madame, Monsieur,

[Corps de la lettre]

Veuillez agr√©er, Madame, Monsieur, l'expression de mes salutations distingu√©es.

[Signature]
        """,
        "cci": """
[CABINET D'AVOCAT]
[Adresse]

R√©f√©rence : [REF_DOSSIER]
Date : {date}

√Ä l'attention de la Commission de Conciliation et d'Indemnisation
[Adresse CCI]

Objet : Demande de conciliation

Madame, Monsieur,

[Corps de la lettre]

Veuillez agr√©er, Madame, Monsieur, l'expression de mes salutations distingu√©es.

[Signature]
        """,
        "oniam": """
[CABINET D'AVOCAT]
[Adresse]

R√©f√©rence : [REF_DOSSIER]
Date : {date}

√Ä l'attention de l'Office National d'Indemnisation des Accidents M√©dicaux
[Adresse ONIAM]

Objet : Demande d'indemnisation - Accident m√©dical

Madame, Monsieur,

[Corps de la lettre]

Veuillez agr√©er, Madame, Monsieur, l'expression de mes salutations distingu√©es.

[Signature]
        """
    }
    
    return templates.get(dest_type, "Template non disponible")

def validate_letter_content(letter: str) -> Dict[str, bool]:
    """
    Valide le contenu d'une lettre g√©n√©r√©e
    """
    checks = {
        "has_header": "CABINET" in letter.upper() or "AVOCAT" in letter.upper(),
        "has_date": any(word in letter for word in ["Date", "Le"]),
        "has_object": "Objet" in letter,
        "has_signature": any(word in letter for word in ["Signature", "Salutations", "Distingu√©es"]),
        "has_legal_refs": any(word in letter for word in ["Article", "Code", "Cass.", "CE"])
    }
    
    return checks

def validate_letter_infutable(letter: str) -> Dict[str, bool]:
    """
    Valide qu'une lettre contient tous les √©l√©ments "infutables"
    """
    checks = {
        "references_exactes": any(ref in letter for ref in ["Cass. 1re civ., 14 oct. 2010, n¬∞ 09-69.199", "Cass. 1re civ., 14 octobre 2010"]),
        "articles_loi": any(art in letter for art in ["L.1110-5 CSP", "1240 Code civil", "R.4127-33"]),
        "chiffrage_oniam": any(word in letter for word in ["ONIAM", "bar√®me", "estimation", "‚Ç¨"]),
        "guide_has": "HAS" in letter and any(word in letter for word in ["guide", "recommandations", "protocole"]),
        "pieces_jointes": any(word in letter for word in ["pi√®ces jointes", "CR m√©dical", "compte-rendu", "certificat"]),
        "signature_personnalisee": "Ma√Ætre" in letter and any(word in letter for word in ["Sp√©cialiste", "Barreau"]),
        "copie_conforme": "copie conforme" in letter.lower(),
        "delai_precis": any(word in letter for word in ["jours", "semaines", "mois", "30 jours", "15 jours"])
    }
    
    return checks

def display_infutable_checklist(letter: str):
    """
    Affiche la checklist "infutable" pour une lettre
    """
    checks = validate_letter_infutable(letter)
    
    st.markdown("---")
    st.markdown("### ‚úÖ Checklist 'Lettre Infutable'")
    
    col1, col2 = st.columns(2)
    
    with col1:
        for check_name, is_valid in list(checks.items())[:4]:
            status = "‚úÖ" if is_valid else "‚ùå"
            label = {
                "references_exactes": "R√©f√©rences juridiques exactes",
                "articles_loi": "Articles de loi pr√©cis",
                "chiffrage_oniam": "Chiffrage ONIAM 2024",
                "guide_has": "Guide HAS cit√©"
            }[check_name]
            st.markdown(f"{status} {label}")
    
    with col2:
        for check_name, is_valid in list(checks.items())[4:]:
            status = "‚úÖ" if is_valid else "‚ùå"
            label = {
                "pieces_jointes": "Pi√®ces jointes list√©es",
                "signature_personnalisee": "Signature personnalis√©e",
                "copie_conforme": "Copie conforme",
                "delai_precis": "D√©lai pr√©cis"
            }[check_name]
            st.markdown(f"{status} {label}")
    
    # Score global
    score = sum(checks.values()) / len(checks) * 100
    st.markdown(f"**Score 'Infutable' : {score:.0f}%**")
    
    if score >= 80:
        st.success("üéØ Lettre juridiquement solide et 'infutable' !")
    elif score >= 60:
        st.warning("‚ö†Ô∏è Lettre correcte mais peut √™tre renforc√©e")
    else:
        st.error("‚ùå Lettre fragile, r√©g√©n√©ration recommand√©e")

# ============================================================================
# FONCTION D'EXPORT PDF (PLACEHOLDER)
# ============================================================================

def export_letter_to_pdf(letter: str, dest_type: str) -> bytes:
    """
    Exporte la lettre en PDF (√† impl√©menter avec reportlab ou weasyprint)
    """
    # TODO: Impl√©menter l'export PDF
    return b"PDF placeholder" 