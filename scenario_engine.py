"""
Moteur de sc√©narios pour LegalDocBot
G√©n√®re des hypoth√®ses "Et si..." pour pr√©parer les strat√©gies contentieuses
"""

import streamlit as st
from typing import Dict, List, Optional, Tuple
import random
from grok_client import get_grok_client

# ============================================================================
# SC√âNARIOS PR√âD√âFINIS
# ============================================================================

SCENARIO_TEMPLATES = {
    "delai": {
        "name": "Retard de Diagnostic/Traitement",
        "variations": [
            "Et si le diagnostic avait √©t√© pos√© 2 jours plus t√¥t ?",
            "Et si le traitement avait √©t√© initi√© 1 semaine plus t√¥t ?",
            "Et si la consultation sp√©cialis√©e avait eu lieu 1 mois plus t√¥t ?",
            "Et si l'examen compl√©mentaire avait √©t√© prescrit imm√©diatement ?"
        ],
        "impact_factors": ["perte de chance", "aggravation", "s√©quelles"]
    },
    
    "specialiste": {
        "name": "Changement de Sp√©cialiste",
        "variations": [
            "Et si un autre cardiologue avait √©t√© consult√© ?",
            "Et si un chirurgien plus exp√©riment√© avait op√©r√© ?",
            "Et si un second avis avait √©t√© demand√© ?",
            "Et si un centre expert avait √©t√© sollicit√© ?"
        ],
        "impact_factors": ["expertise", "technique", "r√©sultat"]
    },
    
    "examen": {
        "name": "Examens Compl√©mentaires",
        "variations": [
            "Et si un scanner avait √©t√© r√©alis√© d√®s le d√©but ?",
            "Et si une IRM avait √©t√© prescrite ?",
            "Et si des analyses sanguines compl√®tes avaient √©t√© faites ?",
            "Et si une √©chographie avait √©t√© pratiqu√©e ?"
        ],
        "impact_factors": ["diagnostic pr√©coce", "traitement adapt√©", "pr√©vention"]
    },
    
    "traitement": {
        "name": "Traitement Alternatif",
        "variations": [
            "Et si un autre m√©dicament avait √©t√© prescrit ?",
            "Et si la posologie avait √©t√© diff√©rente ?",
            "Et si une intervention chirurgicale avait √©t√© propos√©e ?",
            "Et si un traitement conservateur avait √©t√© choisi ?"
        ],
        "impact_factors": ["efficacit√©", "effets secondaires", "r√©sultat"]
    },
    
    "information": {
        "name": "Information du Patient",
        "variations": [
            "Et si les risques avaient √©t√© clairement expliqu√©s ?",
            "Et si le consentement avait √©t√© √©clair√© ?",
            "Et si les alternatives avaient √©t√© pr√©sent√©es ?",
            "Et si le patient avait √©t√© inform√© des complications possibles ?"
        ],
        "impact_factors": ["consentement", "choix √©clair√©", "responsabilit√©"]
    },
    
    "surveillance": {
        "name": "Surveillance Post-Traitement",
        "variations": [
            "Et si la surveillance avait √©t√© plus rapproch√©e ?",
            "Et si des contr√¥les r√©guliers avaient √©t√© programm√©s ?",
            "Et si une hospitalisation avait √©t√© prolong√©e ?",
            "Et si un suivi sp√©cialis√© avait √©t√© mis en place ?"
        ],
        "impact_factors": ["d√©tection pr√©coce", "complication", "√©volution"]
    }
}

# ============================================================================
# PROMPT POUR ANALYSE DE SC√âNARIO
# ============================================================================

SCENARIO_ANALYSIS_PROMPT = """Tu es LegalDocBot, expert en analyse de sc√©narios juridiques m√©dicaux.

SITUATION DE BASE :
{situation}

SC√âNARIO HYPOTH√âTIQUE :
{scenario}

ANALYSE JURIDIQUE DE BASE :
{base_analysis}

INSTRUCTIONS :
Analysez l'impact juridique de ce sc√©nario hypoth√©tique en r√©pondant aux questions suivantes :

1. **IMPACT SUR LA RESPONSABILIT√â** :
   - La responsabilit√© m√©dicale serait-elle engag√©e diff√©remment ?
   - Quels nouveaux √©l√©ments de preuve seraient disponibles ?
   - La faute serait-elle plus ou moins caract√©ris√©e ?

2. **IMPACT SUR L'INDEMNISATION** :
   - Le montant de l'indemnisation serait-il diff√©rent ?
   - Quels nouveaux pr√©judices pourraient √™tre indemnis√©s ?
   - La perte de chance serait-elle √©valu√©e diff√©remment ?

3. **STRAT√âGIE CONTENTIEUSE** :
   - Quels arguments juridiques seraient renforc√©s ?
   - Quels nouveaux moyens de d√©fense seraient disponibles ?
   - La proc√©dure serait-elle diff√©rente ?

4. **RECOMMANDATIONS** :
   - Quelles actions pr√©ventives recommandez-vous ?
   - Quels √©l√©ments de preuve faut-il consolider ?
   - Quelle strat√©gie contentieuse adopter ?

FORMAT DE R√âPONSE :
- Structure claire avec titres
- Citations d'articles de loi pertinents
- R√©f√©rences √† la jurisprudence applicable
- Recommandations concr√®tes et actionnables

G√©n√©rez UNIQUEMENT l'analyse juridique, sans commentaires suppl√©mentaires."""

# ============================================================================
# CLASSE PRINCIPALE DU MOTEUR DE SC√âNARIOS
# ============================================================================

class ScenarioEngine:
    """
    Moteur de g√©n√©ration et d'analyse de sc√©narios hypoth√©tiques
    """
    
    def __init__(self):
        self.templates = SCENARIO_TEMPLATES
        self.client = get_grok_client()
    
    def generate_scenarios(self, situation: str, scenario_types: List[str] = None) -> List[Dict]:
        """
        G√©n√®re des sc√©narios hypoth√©tiques bas√©s sur la situation
        """
        if scenario_types is None:
            scenario_types = list(self.templates.keys())
        
        scenarios = []
        
        for scenario_type in scenario_types:
            if scenario_type in self.templates:
                template = self.templates[scenario_type]
                
                # S√©lection al√©atoire d'une variation
                variation = random.choice(template["variations"])
                
                scenario = {
                    "type": scenario_type,
                    "name": template["name"],
                    "question": variation,
                    "impact_factors": template["impact_factors"],
                    "description": self._generate_scenario_description(variation, situation)
                }
                
                scenarios.append(scenario)
        
        return scenarios
    
    def _generate_scenario_description(self, question: str, situation: str) -> str:
        """
        G√©n√®re une description d√©taill√©e du sc√©nario
        """
        # Analyse rapide de la situation pour adapter le sc√©nario
        medical_keywords = ["diagnostic", "traitement", "chirurgie", "m√©dicament", "examen"]
        found_keywords = [kw for kw in medical_keywords if kw.lower() in situation.lower()]
        
        if "diagnostic" in found_keywords:
            return f"Ce sc√©nario explore l'impact d'un {question.lower()}. Cela pourrait modifier la chronologie des √©v√©nements et potentiellement am√©liorer le pronostic du patient."
        elif "traitement" in found_keywords:
            return f"Ce sc√©nario examine les cons√©quences d'un {question.lower()}. Cela pourrait influencer l'efficacit√© du traitement et les r√©sultats obtenus."
        else:
            return f"Ce sc√©nario hypoth√©tique analyse l'impact d'un {question.lower()}. Cela pourrait modifier l'√©volution de la situation m√©dicale."
    
    def analyze_scenario(self, situation: str, scenario: Dict, base_analysis: str) -> str:
        """
        Analyse l'impact juridique d'un sc√©nario hypoth√©tique
        """
        try:
            # Construction du prompt
            prompt = SCENARIO_ANALYSIS_PROMPT.format(
                situation=situation,
                scenario=scenario["question"],
                base_analysis=base_analysis
            )
            
            # Appel √† Grok-4
            analysis = self.client.generate_completion(prompt, temperature=0.3)
            
            if analysis and analysis.strip():
                return analysis.strip()
            else:
                return "‚ùå Erreur lors de l'analyse du sc√©nario"
                
        except Exception as e:
            return f"‚ùå Erreur technique : {str(e)}"
    
    def get_scenario_impact_score(self, scenario_analysis: str) -> Dict[str, float]:
        """
        Calcule un score d'impact pour le sc√©nario
        """
        scores = {
            "responsabilite": 0.0,
            "indemnisation": 0.0,
            "strategie": 0.0
        }
        
        # Analyse simple bas√©e sur les mots-cl√©s
        if "responsabilit√©" in scenario_analysis.lower() or "faute" in scenario_analysis.lower():
            scores["responsabilite"] += 0.3
        
        if "indemnisation" in scenario_analysis.lower() or "pr√©judice" in scenario_analysis.lower():
            scores["indemnisation"] += 0.3
        
        if "strat√©gie" in scenario_analysis.lower() or "argument" in scenario_analysis.lower():
            scores["strategie"] += 0.3
        
        # Normalisation
        for key in scores:
            scores[key] = min(scores[key], 1.0)
        
        return scores

# ============================================================================
# INTERFACE STREAMLIT
# ============================================================================

def display_scenario_engine(situation: str, base_analysis: str):
    """
    Interface Streamlit pour le moteur de sc√©narios
    """
    st.markdown("---")
    st.markdown("### üé≠ Moteur de Sc√©narios")
    st.markdown("*G√©n√©rez des hypoth√®ses \"Et si...\" pour pr√©parer vos strat√©gies contentieuses*")
    
    if not situation or not base_analysis:
        st.warning("‚ö†Ô∏è Veuillez d'abord effectuer une analyse juridique pour g√©n√©rer des sc√©narios.")
        return
    
    # Initialisation du moteur
    engine = ScenarioEngine()
    
    # S√©lection des types de sc√©narios
    st.markdown("#### üéØ Types de Sc√©narios")
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        selected_types = st.multiselect(
            "S√©lectionnez les types de sc√©narios √† g√©n√©rer :",
            options=list(SCENARIO_TEMPLATES.keys()),
            default=["delai", "specialiste", "examen"],
            format_func=lambda x: SCENARIO_TEMPLATES[x]["name"]
        )
    
    with col2:
        if st.button("üöÄ G√©n√©rer Sc√©narios", type="primary", key="generate_scenarios"):
            if selected_types:
                with st.spinner("üé≠ G√©n√©ration des sc√©narios en cours..."):
                    scenarios = engine.generate_scenarios(situation, selected_types)
                    st.session_state.generated_scenarios = scenarios
                st.success(f"‚úÖ {len(scenarios)} sc√©narios g√©n√©r√©s !")
            else:
                st.error("‚ùå Veuillez s√©lectionner au moins un type de sc√©nario")
    
    # Affichage des sc√©narios g√©n√©r√©s
    if hasattr(st.session_state, 'generated_scenarios') and st.session_state.generated_scenarios:
        st.markdown("---")
        st.markdown("#### üìã Sc√©narios G√©n√©r√©s")
        
        for i, scenario in enumerate(st.session_state.generated_scenarios, 1):
            with st.expander(f"üé≠ Sc√©nario {i} : {scenario['name']}"):
                st.markdown(f"**Question :** {scenario['question']}")
                st.markdown(f"**Description :** {scenario['description']}")
                
                # Facteurs d'impact
                st.markdown("**Facteurs d'impact :**")
                for factor in scenario['impact_factors']:
                    st.markdown(f"- {factor}")
                
                # Bouton d'analyse
                if st.button(f"üîç Analyser Sc√©nario {i}", key=f"analyze_{i}"):
                    with st.spinner("üîç Analyse juridique du sc√©nario..."):
                        analysis = engine.analyze_scenario(situation, scenario, base_analysis)
                        st.session_state.scenario_analysis = analysis
                        st.session_state.current_scenario = scenario
                    st.success("‚úÖ Analyse termin√©e !")
        
        # Affichage de l'analyse du sc√©nario s√©lectionn√©
        if hasattr(st.session_state, 'scenario_analysis') and st.session_state.scenario_analysis:
            st.markdown("---")
            st.markdown("#### üîç Analyse du Sc√©nario")
            
            # Informations sur le sc√©nario analys√©
            if hasattr(st.session_state, 'current_scenario'):
                scenario = st.session_state.current_scenario
                st.info(f"**Sc√©nario analys√© :** {scenario['question']}")
            
            # Affichage de l'analyse
            st.markdown(st.session_state.scenario_analysis)
            
            # Score d'impact
            scores = engine.get_scenario_impact_score(st.session_state.scenario_analysis)
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("‚öñÔ∏è Impact Responsabilit√©", f"{scores['responsabilite']:.1%}")
            with col2:
                st.metric("üí∞ Impact Indemnisation", f"{scores['indemnisation']:.1%}")
            with col3:
                st.metric("üéØ Impact Strat√©gie", f"{scores['strategie']:.1%}")
            
            # Boutons d'action
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("üì• Exporter Analyse", key="export_analysis"):
                    st.info("üîÑ Fonctionnalit√© d'export en cours de d√©veloppement")
            
            with col2:
                if st.button("üîÑ Nouvelle Analyse", key="new_analysis"):
                    del st.session_state.scenario_analysis
                    st.rerun()

# ============================================================================
# FONCTIONS UTILITAIRES
# ============================================================================

def get_scenario_statistics(scenarios: List[Dict]) -> Dict:
    """
    Calcule les statistiques des sc√©narios g√©n√©r√©s
    """
    if not scenarios:
        return {}
    
    stats = {
        'total_scenarios': len(scenarios),
        'scenario_types': {},
        'impact_factors': set()
    }
    
    for scenario in scenarios:
        # Comptage par type
        scenario_type = scenario['type']
        stats['scenario_types'][scenario_type] = stats['scenario_types'].get(scenario_type, 0) + 1
        
        # Facteurs d'impact uniques
        stats['impact_factors'].update(scenario['impact_factors'])
    
    stats['impact_factors'] = list(stats['impact_factors'])
    
    return stats

def validate_scenario_inputs(situation: str, base_analysis: str) -> Dict[str, bool]:
    """
    Valide les entr√©es pour la g√©n√©ration de sc√©narios
    """
    checks = {
        "situation_valid": len(situation.strip()) > 50,
        "analysis_valid": len(base_analysis.strip()) > 100,
        "medical_content": any(word in situation.lower() for word in ["diagnostic", "traitement", "m√©dical", "sant√©"])
    }
    
    return checks 